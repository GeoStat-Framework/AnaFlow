
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/04_call_ext_theis_tpl.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_04_call_ext_theis_tpl.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_04_call_ext_theis_tpl.py:


The extended Theis solution for truncated power laws
====================================================

We provide an extended theis solution, that incorporates the effectes of a
heterogeneous conductivity field following a truncated power law.
In addition, it incorporates the assumptions of the general radial flow model
and provides an arbitrary flow dimension.

In the following this extended solution is compared to the standard theis
solution for well flow. You can nicely see, that the extended solution represents
a transition between the theis solutions for the well- and farfield-conductivity.

Reference: (not yet published)

.. GENERATED FROM PYTHON SOURCE LINES 16-21

.. code-block:: default

    import numpy as np
    from matplotlib import pyplot as plt
    from anaflow import theis, ext_theis_tpl









.. GENERATED FROM PYTHON SOURCE LINES 22-23

We use three time steps: 10s, 10min, 10h

.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: default


    time_labels = ["10 s", "10 min", "10 h"]
    time = [10, 600, 36000]  # 10s, 10min, 10h








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Radius from the pumping well should be in [0, 4].

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default


    rad = np.geomspace(0.05, 4)








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Parameters of heterogeneity, storage and pumping rate.

.. GENERATED FROM PYTHON SOURCE LINES 34-44

.. code-block:: default


    var = 0.5  # variance of the log-conductivity
    len_scale = 20.0  # upper bound for the length scale
    hurst = 0.5  # hurst coefficient
    KG = 1e-4  # the geometric mean of the conductivity
    KH = KG * np.exp(-var / 2)  # the harmonic mean of the conductivity

    S = 1e-4  # storage
    rate = -1e-4  # pumping rate








.. GENERATED FROM PYTHON SOURCE LINES 45-47

Now let's compare the extended Theis TPL solution to the classical solutions
for the near and far field values of transmissivity.

.. GENERATED FROM PYTHON SOURCE LINES 47-86

.. code-block:: default


    head_KG = theis(time, rad, S, KG, rate)
    head_KH = theis(time, rad, S, KH, rate)
    head_ef = ext_theis_tpl(
        time=time,
        rad=rad,
        storage=S,
        cond_gmean=KG,
        len_scale=len_scale,
        hurst=hurst,
        var=var,
        rate=rate,
    )
    time_ticks = []
    for i, step in enumerate(time):
        label_TG = "Theis($K_G$)" if i == 0 else None
        label_TH = "Theis($K_H$)" if i == 0 else None
        label_ef = "extended Theis TPL 2D" if i == 0 else None
        plt.plot(
            rad, head_KG[i], label=label_TG, color="C" + str(i), linestyle="--"
        )
        plt.plot(
            rad, head_KH[i], label=label_TH, color="C" + str(i), linestyle=":"
        )
        plt.plot(rad, head_ef[i], label=label_ef, color="C" + str(i))
        time_ticks.append(head_ef[i][-1])

    plt.xscale("log")
    plt.xlabel("r in [m]")
    plt.ylabel("h in [m]")
    plt.legend()
    ylim = plt.gca().get_ylim()
    plt.gca().set_xlim([rad[0], rad[-1]])
    ax2 = plt.gca().twinx()
    ax2.set_yticks(time_ticks)
    ax2.set_yticklabels(time_labels)
    ax2.set_ylim(ylim)
    plt.tight_layout()
    plt.show()



.. image:: /examples/images/sphx_glr_04_call_ext_theis_tpl_001.png
    :alt: 04 call ext theis tpl
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.788 seconds)


.. _sphx_glr_download_examples_04_call_ext_theis_tpl.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 04_call_ext_theis_tpl.py <04_call_ext_theis_tpl.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 04_call_ext_theis_tpl.ipynb <04_call_ext_theis_tpl.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
