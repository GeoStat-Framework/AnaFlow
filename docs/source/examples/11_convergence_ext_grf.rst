
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/11_convergence_ext_grf.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_11_convergence_ext_grf.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_11_convergence_ext_grf.py:


Convergence of the general radial flow model (GRF)
==================================================

The GRF model introduces an arbitrary flow dimension and was presented to
analyze groundwater flow in rock formations.
In the following we compare the bounded transient solution for late times,
the unbounded quasi steady solution and the steady state.

Reference: `Barker 1988 <https://doi.org/10.1029/WR024i010p01796>`__

.. GENERATED FROM PYTHON SOURCE LINES 12-41



.. image:: /examples/images/sphx_glr_11_convergence_ext_grf_001.png
    :alt: 11 convergence ext grf
    :class: sphx-glr-single-img





.. code-block:: default

    import numpy as np
    from matplotlib import pyplot as plt
    from anaflow import ext_grf, ext_grf_steady, grf

    time = 1e4  # time point for steady state
    rad = np.geomspace(0.1, 10)  # radius from the pumping well in [0, 4]
    r_ref = 10.0  # reference radius

    K = 1e-4  # the geometric mean of the transmissivity
    dim = 1.5  # using a fractional dimension

    rate = -1e-4  # pumping rate

    head1 = ext_grf_steady(rad, r_ref, K, dim=dim, rate=rate)
    head2 = ext_grf(time, rad, [1e-4], [K], [0, r_ref], dim=dim, rate=rate)
    head3 = grf(time, rad, 1e-4, K, dim=dim, rate=rate)
    head3 -= head3[-1]  # quasi-steady

    plt.plot(rad, head1, label="Ext GRF steady")
    plt.plot(rad, head2, label="Ext GRF (t={})".format(time), linestyle="--")
    plt.plot(
        rad, head3, label="GRF quasi-steady (t={})".format(time), linestyle=":"
    )

    plt.xlabel("r in [m]")
    plt.ylabel("h in [m]")
    plt.legend()
    plt.tight_layout()
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.511 seconds)


.. _sphx_glr_download_examples_11_convergence_ext_grf.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 11_convergence_ext_grf.py <11_convergence_ext_grf.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 11_convergence_ext_grf.ipynb <11_convergence_ext_grf.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
